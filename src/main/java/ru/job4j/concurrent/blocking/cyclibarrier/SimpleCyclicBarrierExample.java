package ru.job4j.concurrent.blocking.cyclibarrier;

import java.util.concurrent.*;

public class SimpleCyclicBarrierExample {
    public static void main(String[] args) {
        final int PARTIES = 3;
        CyclicBarrier barrier = new CyclicBarrier(PARTIES, () -> System.out.println("Barrier tripped ‚Äî –≤—Å–µ –≥–æ—Ç–æ–≤—ã! üéâ"));

        ExecutorService exec = Executors.newFixedThreadPool(PARTIES);
        for (int i = 1; i <= PARTIES; i++) {
            final int id = i;
            exec.submit(() -> {
                try {
                    System.out.println("Worker " + id + " –≥–æ—Ç–æ–≤–∏—Ç—Å—è...");
                    Thread.sleep(500L * id); // –∏–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
                    System.out.println("Worker " + id + " –≤—ã–∑–≤–∞–ª await()");
                    barrier.await(); // –∂–¥—ë–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
                    System.out.println("Worker " + id + " –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É üöÄ");
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                } catch (BrokenBarrierException e) {
                    System.out.println("Barrier —Å–ª–æ–º–∞–Ω –¥–ª—è worker " + id);
                }
            });
        }
        exec.shutdown();
    }
}
