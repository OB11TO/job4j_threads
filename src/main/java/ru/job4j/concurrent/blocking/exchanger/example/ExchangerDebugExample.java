package ru.job4j.concurrent.blocking.exchanger.example;

import java.util.concurrent.Exchanger;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class ExchangerDebugExample {
    public static void main(String[] args) {
        Exchanger<String> exchanger = new Exchanger<>();

        /* –ü–æ—Ç–æ–∫ A ‚Äî ‚ÄúProducer‚Äù */
        new Thread(() -> {
            String myData = "–ë—É—Ñ–µ—Ä-A"; /* üè∑Ô∏è —Ç–æ, —á—Ç–æ A –≥–æ—Ç–æ–≤ –æ—Ç–¥–∞—Ç—å */
            try {
                System.out.println("A: –ø–µ—Ä–µ–¥ exchange(), myData = " + myData);
                /*  üîÑ –ó–¥–µ—Å—å A –≤—Å—Ç—Ä–µ—Ç–∏—Ç—Å—è —Å B –∏ –æ–±–º–µ–Ω—è–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–º–∏: */
                String fromB = exchanger.exchange(myData, 5, TimeUnit.SECONDS);
                System.out.println("A: –ø–æ—Å–ª–µ exchange(), –ø–æ–ª—É—á–∏–ª fromB = " + fromB);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            } catch (TimeoutException e) {
                System.out.println("A: –ø–æ—Ç–µ—Ä—è–ª –≤—Å—Ç—Ä–µ—á—É (timeout)!");
            }
        }, "Thread-A").start();

        /* –ü–æ—Ç–æ–∫ B ‚Äî ‚ÄúConsumer‚Äù*/
        new Thread(() -> {
            String myData = "–ë—É—Ñ–µ—Ä-B"; /* üè∑Ô∏è —Ç–æ, —á—Ç–æ B –≥–æ—Ç–æ–≤ –æ—Ç–¥–∞—Ç—å */
            try {
                /* –ñ–¥—ë–º —á—É—Ç—å –¥–æ–ª—å—à–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ A –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –¥–æ –ø—Ä–∏—Ö–æ–¥–∞ B: */
                Thread.sleep(100);
                System.out.println("B: –ø–µ—Ä–µ–¥ exchange(), myData = " + myData);
                String fromA = exchanger.exchange(myData, 5, TimeUnit.SECONDS);
                System.out.println("B: –ø–æ—Å–ª–µ exchange(), –ø–æ–ª—É—á–∏–ª fromA = " + fromA);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            } catch (TimeoutException e) {
                System.out.println("B: –ø–æ—Ç–µ—Ä—è–ª –≤—Å—Ç—Ä–µ—á—É (timeout)!");
            }
        }, "Thread-B").start();
    }
}
